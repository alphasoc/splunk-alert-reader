import argparse

from splunklib import client
from splunklib import binding

from lib import params
from lib import getter


def main():
    parser = argparse.ArgumentParser(description=(
        "Fetch alerts generated by DNS Analytics for Splunk and write them to standard output. "
        "This script requires connection with Splunk instance on which alerts are stored. Please provide "
        "connection settings in configuration file. Unfold options allows to divide alerts into single "
        "threat and returns flattened stream of json objects. By default script will search for alerts "
        "in all available indexes but you can narrow search scope to specific index."
    ))

    parser.add_argument("-c", "--config", help="path to configuration file")
    args = parser.parse_args()

    config = params.create_config(args.config)
    params_connection = params.Connection.from_config(config)
    params_query = params.Query.from_config(config)

    service = client.connect(
        scheme=params_connection.scheme,
        host=params_connection.host,
        port=params_connection.port,
        username=params_connection.username,
        password=params_connection.password,
    )

    if params_query.timeout > 0:
        service.http = binding.HttpLib(binding.handler(timeout=params_query.timeout))

    alerts_getter = getter.Getter(service, params_query)
    alerts_getter.run()


if __name__ == "__main__":
    main()
